<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-12-01" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2023-08-02" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2023-08-02" />
<meta name="version" content="1" />
<meta name="categories" content="" />
<meta name="tags" content="" />
<meta name="description" content="A lightweight but powerful test framework for JavaScript. Can test classic scripts as well as  JavaScript modules." />
<link rel="icon" type="image/png" href="/favicon.png" sizes="16x16" />
<link rel="stylesheet" href="/inc/page.css" />
<link rel="stylesheet" href="/site.css" />
<style>
.text-output { 
	font-family : Times New Roman;
	font-size : 16px;
	white-space : pre;
	tab-size : 90px;
	}
</style>

<title>JavaScript - JS-Test Module Test Library</title>

</head><body><header id="page-header"><object data="title.svg" type="image/svg+xml"></object></header><div id="main-toolbar"></div><main id="page-content">

<h1>JS-Test</h1>

<p id="page-abstract"></p>

<h2 cbc>Overview</h2><div>

<p>The goal is to make writing tests simple and provide test documentation in one go. Tests are written as HTML documents with embedded JavaScript test instructions:</p>

<figcaption class="listing">A test instruction</figcaption>
<pre>
test.checkEqual( "calculator.sum( 1, 2, 3 ) === 6", "", 
calculator.sum( 1, 2, 3 ), 6 );
</pre>

<p>The document runs the tests, and the <tt>test.check...()</tt> functions inject the HTML test documentation. So the test document also serves as test result documentation. If something has changed, simply reload the test document and you should see if there are problems, and where they are.</p>

<p>JS-Test supports hierarchical test structures with sections and modules. A test module is an HTML document with test instructions. A test module document is self-contained and can run on its own.</p>

<p>Multiple test module documents can be combined in a parent test document in ordinary <tt>IFRAME</tt> elements to create a test tree structure.</p>

<p>Large test module documents can be divided into sections, grouping a number of tests which focus on some aspect of the test target. Sections can be nested.</p>

<p>Module and section summaries provide condensed status information along the branches of the tree. Text coloring quickly guides to the parts which expose problems.</p>

<p>Examples:</p>

<dl>
<dt><a href="test-s-1.htm">test-s-1.htm</a></dt>
<dd>A synchronous test suite for a non-module <a href="calculator-lib.js">calculator-lib.js</a>. Integrates the follwing two test modules.</dd>

<dt><a href="test-s-2.htm">test-s-2.htm</a></dt>
<dt><a href="test-s-3.htm">test-s-3.htm</a></dt>
<dd>Test modules for the calculator-lib.</dd>

<dt><a href="test-a-1.htm">test-a-1.htm</a></dt>
<dd>An asynchronous test suite for a <a href="calculator-module.js">calculator-module.js</a>. Integrates the follwing two test modules.</dd>

<dt><a href="test-a-2.htm">test-a-2.htm</a></dt>
<dt><a href="test-a-3.htm">test-a-3.htm</a></dt>
<dd>Test modules for the calculator-module.</dd>
</dl>

<!--h2--></div>

<h2 cbc>Testing Classic JavaScript Libraries</h2><div>

<p>Let's consider a classic script library:</p>

<figcaption class="listing">calculator-lib.js</figcaption>
<pre>
var calculator = { 
	sum : function ( ...args ) {
		let result = 0;
		for ( const n of args ) result += n ;
		return result;
		}
	...
	} ;
</pre>

<p>The code creates a <tt>calculator</tt> object, adds it to the global scope and defines a number of functions, which we will have to test. </p>

<h3 cbc>Linking to the Libraries</h3><div>

<p>The <tt>js-test.js</tt> and the <tt>calculator-lib.js</tt> libraries are integrated into the document with the following instructions:</p>

<figcaption class="listing">Importing classic JavaScript libraries</figcaption>
<pre>
&lt;html&gt;&lt;head&gt;
...
&lt;link rel="stylesheet" href="/inc/js-test/<hi>js-test-0.css</hi>" /&gt;
&lt;script src="/inc/js-test/<hi>js-test.js</hi>"&gt;&lt;/script&gt;
&lt;script src="<hi>calculator-lib.js</hi>"&gt;&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
...
</pre>

<p>Of course, you can include additional test targets in a test document. But to keep things simple, we will stick to the single calculator lib.</p>

<p>At this point, the code is avaliable to the document. JS-Test provides the testing support function in the global <tt>test</tt> object.</p>

<!--h3--></div>

<h3 cbc>Authoring the Test Document.</h3><div>

<p>The body should contain a heading and a subtitle, followed by a script that initializes the test document:</p>

<figcaption class="listing">Initializing the test document</figcaption>
<pre>
&lt;body&gt;
&lt;h1&gt;Calculator Test Module&lt;/h1&gt;
&lt;p&gt;A subtitle. Should be a one-liner.&lt;/p&gt;
&lt;script&gt;<hi>test.initModule();</hi>&lt;/script&gt;
&lt;p&gt;Here you can add more details about the 
	test module and/or create some test infrastructure.&lt;/p&gt;
</pre>

<p>The <tt>initModule</tt> script initializes the test document and creates a test module summary:</p>

<pre class="text-output">
Status:		undefined
Sections processed:	0
Sections s\ucceeded:	0
Sections failed:	0
Tests performed:	0
Tests succeeded:	0
Tests failed:		0
</pre>

<p>At the bottom of the document, the module should be closed with the following script:</p>

<figcaption class="listing">Closing the Test document</figcaption>
<pre>
&lt;script&gt;<hi>test.closeModule();</hi>&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<p>This function call updates the test module status after running the tests.</p>

<!--h3--></div>

<h3 cbc>Creating Sections</h3><div>

<p>A <i>section</i> divides a test document into logical parts. To create a section, add a heading element, followed by a <tt>div</tt> element with an init script:</p>

<figcaption class="listing">Initializing a Section</figcaption>
<pre>
&lt;h2 <hi>cbc</hi>&gt;Section <span class="section-number"></span>s - Basic Functions&lt;/h2&gt;&lt;div&gt;
&lt;script&gt;<hi>test.initSection();</hi>&lt;/script&gt;
...
&lt;script&gt;<hi>test.closeSection();</hi>&lt;/script&gt;
&lt;/div&gt;
</pre>

<p>The section init script creates a section summary in the document, similar to the module summary above:</p>

<pre class="text-output">
Status:		undefined
Tests performed:	0
Tests succeeded:	0
Tests failed:		0
</pre>

<p>At the end of the section, the <tt>test.closeSection()</tt> must be called to update the section status and the module summary counters.</p>

<p>Note that sections can be nested. This can be useful for larger test documents.</p>

<!--h3--></div>

<h3 cbc>Writing Tests</h3><div>

<p>A test requires calling one of the <tt>test.check...()</tt> functions:</p>

<figcaption class="listing">Adding tests</figcaption>
<pre>
&lt;script&gt;
test.checkEqual ( "title", "Test description", 
	calculator.add( 1,2,3 ),  <cc>// calculated value</cc>
	6,   <cc>// Expected value</cc>
	"Values should be equal"  <cc>// Hint if test fails</cc>
	);
&lt;/script&gt;
</pre>

<p>The <tt>test.check...( )</tt> functions expect a test title, an optional description, the calculated value, the expected value and an optional failure hint text. As the name suggests, <tt>checkEqual</tt> requires the calculated und expected values to be equal.</p>

<p>The <tt>check</tt> functions create a test result HTML element in the document right above the script element. You can add more test calls to the script if you like. Alternatively, you can distribute test calls over several script elements within the same section. And of cource, you can add text, images and whatever it take to describe and document the test procedure.</p>

<p>The <tt>check</tt> functions update the summary counters in the document hierarchy. If a test fails, all related summary status fields are changed to "fail", which causes the associated headings to turn red. This way you have an instant feedback when something goes wrong.</p>

<p>When the last instruction in a section should be <tt>test.closeSection()</tt>, as mentioned above. The last instruction in a document should be <tt>closeModule()</tt>. If all tests succeeded, the document title and the section headers should turn green.</p>

<!--h3--></div>
<!--h2--></div>

<h2 cbc>Testing JavaScript Modules</h2><div>

<p>JavaScript <i>modules</i> are different. One big difference with an impact on the implementation: <tt>document.currentScript</tt> points to the surrounding HTML SCRIPT element in classic JavaScript libraries. This can be exploited in <tt>js-test.js</tt> to inject HTML code before or after the script element, e. g. for test results. But document.currentScript is <i>null</i> inside JavaScript modules &ndash; so there is no clue where to inject test result elements&hellip;</p>

<p>Another big difference is that modules are non-blocking, and they are executed asynchronously on the <tt>defer</tt> queue. On the contrary, non-module scripts are <em>blocking</em>, which means that they are executed while the DOM is being constructed. But at that time, a JavaScript module code is not yet available.</p>

<p>A viable solution is a balanced mixture of non-module and module code. The <tt>js-test</tt> functions can be used to initialize and setup the document in synchronous non-module scripts. But <tt>check</tt> functions cannot used. Instead, they must be placed in a function wrapper and passed to the <tt>test.register()</tt> function. The <tt>register</tt> function stores a reference to the wrapper function and a refererence to the parent (non-module) script element. Later, when the test target module is available to the document, the <tt>test.run()</tt> method is called in an asynchronous <tt>&lt;script type="module"</tt>. <tt>test.run()</tt> cares for setting up a reference to the current script so that check functions know where to inject test result code into the HTML document.</p>

<p>The following chapters illustrate this concept in more detail.</p>

<h3 cbc>Importing the JS-Test Library</h3><div>

<p>The test lib is imported as synchronous non-module script, just like before:</p>

<figcaption class="listing">Importing js-test</figcaption>
<pre>
&lt;html&gt;&lt;head&gt;
...
&lt;link rel="stylesheet" href="/inc/js-test/js-test-0.css" /&gt;
&lt;script src="/inc/js-test/js-test.js"&gt;&lt;/script&gt;
...
&lt;/head&gt;
</pre>

<p>Note that the <tt>calculator-module.js</tt> is imported later.</p>

<!--h3--></div>

<h3 cbc>Initializing the Document</h3><div>

<p>A call to <tt>test.initModule()</tt> initializes the document, as before:</p>

<figcaption class="listing">Initializing the test document</figcaption>
<pre>
&lt;body&gt;
&lt;h1&gt;Calculator Test Module&lt;/h1&gt;
&lt;p&gt;Subtitle, one-liner, optional.&lt;/p&gt;
&lt;script&gt;<hi>test.initModule();</hi>&lt;/script&gt;
&lt;p&gt;More details on the test module.&lt;/p&gt;
</pre>

<!--h3--></div>

<h3 cbc>Creating Sections</h3><div>

<p>To create a section, add a heading element, followed by a <tt>div</tt> element with an init script. Just as we did in the previous chapter:</p>

<figcaption class="listing">Initializing a Section</figcaption>
<pre>
&lt;h2 <hi>cbc</hi>&gt;Section <span class="section-number"></span>s - Basic Functions&lt;/h2&gt;&lt;div&gt;
&lt;script&gt;<hi>test.initSection();</hi>&lt;/script&gt;
...
</pre>

<p>Note that a section is closed slighty different, as shown further down.</p>

<!--h3--></div>

<h3 cbc>Registering Test Functions</h3><div>

<p>Test code cannot be executed synchronously as demonstrated in the previous chapter, because the target library code is not yet available at that time. Instead, use <tt>test.register()</tt> and provide the test code in a function wrapper:</p>

<figcaption class="listing">Registering a test function</figcaption>
<pre>
&lt;script&gt;
test.<hi>register</hi> ( <hi>function</hi> ( ) {
	console.log( "Test started" );
	test.checkEqual( "Sum of numbers 1 to 3", "checks variadic function calls", yourlib.sum(1,2,3), 6, "Sum does not return the expected value." );
	test.checkEqual( "Sum of numbers 2 to 5", null, calculator.sum(2, 3, 4, 5), 14 );
	console.log( "Test finished" );
	} ) ;
&lt;/script&gt;
</pre>

<p>You can write multiple such test scripts, intermixed with arbitrary HTML code, as before.</p>

<!--h3--></div>

<h3 cbc>Closing Sections</h3><div>

<p>Again, sections and documents must be closed to update the test summaries, but it must be done asynchronously, so again we need to make use of the <tt>test.register()</tt> function:</p>

<figcaption class="listing">Closing a section</figcaption>
<pre>
&lt;script&gt;
test.register ( function () {
	test.<hi>closeSection</hi>();
	} ) ;
&lt;/script&gt;
</pre>

<!--h3--></div>


<h3 cbc>Running the Tests</h3><div>

<p>Before the registered test functions, the test target module must be imported into the document, for example with a static <tt>import</tt> instruction. Note that this must be done in a <tt>&lt;script type="module"&gt;</tt>:</p>

<figcaption class="listing">Importing the calculator module</figcaption>
<pre>
&lt;script type="<hi>module</hi>"&gt;
<hi>import</hi> * as calculator from "./calculator-module.js" ;
window.calculator = calculator;
test.<hi>run</hi>();
test.<hi>closeModule</hi>();
&lt;/script&gt;
</pre>

<p>This module script is usually placed near the end of the document.</p>

<p>The <tt>import</tt> instruction makes exported objects avaiable to the current script module as members of the <tt>calculator</tt> object. But the scope of this object is limited to the parent HTML script element. Therefore the second instruction is necessary, which creates a <tt>calculator</tt> member on the global window object and points it to the local <tt>calculator</tt> object. Now the calculator module exports are available in the entire test document.</p>

<p>The next instruction run the registered test functions, then close the module and update the module summary.

<!--h3--></div>

<!--h2--></div>

<h2 cbc>Structuring Test Suites</h2><div>

<p>A test document can contain multiple sections:</p>

<figcaption class="listing">Multiple sections</figcaption>
<pre>
&lt;h2&gt;Section 1&lt;/h2&gt;&lt;div&gt;
...
&lt;/div&gt;
&lt;h2&gt;Section 2&lt;/h2&gt;&lt;div&gt;
...
&lt;/div&gt;
</pre>

<p>Sections can be nested:</p>

<figcaption class="listing">Multiple sections</figcaption>
<pre>
&lt;h2&gt;Section 1&lt;/h2&gt;&lt;div&gt;
...
	&lt;h2&gt;Section 1.1&lt;/h2&gt;&lt;div&gt;
	...
	&lt;/div&gt;
	&lt;h2&gt;Section 1.2&lt;/h2&gt;&lt;div&gt;
	...
	&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>A parent document can include multipe test module documents:</p>

<figcaption class="listing">Multiple sections</figcaption>
<pre>
&lt;body&gt;
&lt;h1&gt;Test Suite&lt;/h1&gt;
&lt;iframe src="test-module-1.htm"&gt;
&lt;iframe src="test-module-2.htm"&gt;
</pre>

<p>And of course, iframes can be nested into sections and intermixed with test functions.</p>

<p>Sections and test documents can have <em>summaries</em> with status information and counter for processed/succeeded/failed tests/sections/modules.</p>

<!--h2--></div>

<h2 cbc>Implementation Details</h2><div>

<h3 cbc>Counting Sections</h3><div>

<p>Sections are registered synchronously, tests can be executed asynchronously. If so, the current section number can be invalid. Therefore, the test must derive the section number from the parent test container, which should be a section. Similarly, the test number in the section must be derived from the section summary test counter.</p>

<!--h3--></div>

<h3 cbc>Collecting Changes</h3><div>

<p>When a test is run, the following state variables change:</p>

<ul>
<li>sectionSummary.testsPerformed += 1</li>
<li>moduleSummary.testsPerformed += 1</li>
</ul>

<p>When a test succeeds, the following state variables change:</p>
<ul>
<li>testContainer.testStatus = "success"</li>
<li>sectionSummary.testsSucceeded += 1</li>
<li>moduleSummary.testSucceeded += 1</li>
</ul>

<ul>
<li>testContainer.testStatus = "fail"</li>
<li>testSection.tests</li>
</ul>


<li>testSection.testStatus = "fail"</li>

<!--h3--></div>

<!--h2--></div>

<h2 cbc>Links</h2><div>

<p>A <a href="t-0-1.htm">module test</a></p>

<p>A <a href="t-0.htm">module test suite</a></p>

<!--h2--></div>

</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js" ></script></body></html>